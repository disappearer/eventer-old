if (process.env.NODE_ENV == 'production') require('dotenv').config();

const d = require('debug');
const debug = d('eventer:debug');
const log = d('eventer:log');
// eslint-disable-next-line no-console
log.log = console.log.bind(console);

const server = require('../dist/src/http/server').server;
const MongoEventRepository = require('../dist/src/db/mongodb/MongoEventRepository')
  .default;
const MongoUserRepository = require('../dist/src/db/mongodb/MongoUserRepository')
  .default;

//Set app repositories.
const dbConnectionEstablished = require('../dist/src/db/mongodb/mongodb.config')
  .connectionEstablished;
const port = normalizePort(process.env.PORT || '3000');
server.app.set('port', port);

const http = require('http');
const httpServer = http.createServer(server.app);

dbConnectionEstablished
  .then(collections => {
    server.eventRepository = new MongoEventRepository(collections[0]);
    server.userRepository = new MongoUserRepository(collections[1], {
      google: collections[2]
    });

    // for integration testing of paths that require authorization
    if (process.env.NODE_ENV == 'integration-test') {
      require('../dist/spec/integration/integration.test.setup').integrationSetup(
        server
      );
    }

    startHTTPServer();
  })
  .catch(error => {
    debug(error);
  });

function startHTTPServer() {
  httpServer.listen(port);
  httpServer.on('error', onError);
  httpServer.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  log('Listening on ' + bind);
}
